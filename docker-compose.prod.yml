# 배포 환경용 Docker Compose
services:
  mysql:
    image: mysql:8.0
    container_name: mysql-prod
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql-data-prod:/var/lib/mysql
    networks:
      - app-network
    env_file:
      - .env

  backend:
    build: 
      context: ./back
      dockerfile: Dockerfile.prod  # 배포용 Dockerfile
    container_name: nest-backend-prod
    restart: unless-stopped
    ports:
      - "4000:4000"
    depends_on:
      - mysql
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: 
      context: ./front
      dockerfile: Dockerfile.prod  # 배포용 Dockerfile
    container_name: next-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql-data-prod:

networks:
  app-network:
    driver: bridge 